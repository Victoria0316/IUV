package bluemobi.iuv.fragment.page;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.ImageView;

import com.android.volley.Response;
import com.bumptech.glide.Glide;
import com.handmark.pulltorefresh.library.PullToRefreshListView;

import java.util.ArrayList;
import java.util.List;

import bluemobi.iuv.R;
import bluemobi.iuv.activity.MainActivity;
import bluemobi.iuv.adapter.CommonAdapter;
import bluemobi.iuv.adapter.ViewHolder;
import bluemobi.iuv.app.IuwApplication;
import bluemobi.iuv.base.utils.Logger;
import bluemobi.iuv.entity.Lonlat;
import bluemobi.iuv.entity.MarketInfoBean;
import bluemobi.iuv.eventbus.LargeDeptEvent;
import bluemobi.iuv.eventbus.StoreDetailsEvent;
import bluemobi.iuv.eventbus.TreasureEvent;
import bluemobi.iuv.fragment.BaseFragment;
import bluemobi.iuv.fragment.DetailFragment;
import bluemobi.iuv.fragment.HomeTreasureFragment;
import bluemobi.iuv.fragment.MarketInfoFragment;
import bluemobi.iuv.fragment.TreasureDetailFragment;
import bluemobi.iuv.network.IuwHttpJsonRequest;
import bluemobi.iuv.network.model.UserInfo;
import bluemobi.iuv.network.request.LargeDepartmentStoresRequest;
import bluemobi.iuv.network.response.LargeDepartmentStoresResponse;
import bluemobi.iuv.util.Constants;
import bluemobi.iuv.util.SharedPreferencesUtil;
import bluemobi.iuv.util.StringUtils;
import bluemobi.iuv.util.Utils;
import bluemobi.iuv.util.WebUtils;
import bluemobi.iuv.view.CustomSpinnerSingle;
import butterknife.Bind;
import butterknife.ButterKnife;
import de.greenrobot.event.EventBus;

/**
 * Created by liufy on 2015/8/8.
 * 大型百货
 */
public class LargeDepartmentStoresPage extends BasePage {

    protected
    @Bind(R.id.plv_refresh)
    PullToRefreshListView plv_refresh;

    private DetailFragment fragment;

    private HomeTreasureFragment mHomeTreasureFragment;

    private String mDivisionCode;
    private String currentpage;
    private String mDivisionType;

    private boolean isFrist = true;

    private CommonAdapter<LargeDepartmentStoresResponse.LargeDepartmentStoresDto> adapter;

    private List<LargeDepartmentStoresResponse.LargeDepartmentStoresDto> dataList = new ArrayList<LargeDepartmentStoresResponse.LargeDepartmentStoresDto>();

    private boolean isDetailFragment = false;

    private List<MarketInfoBean> marketInfoBeans = new ArrayList<MarketInfoBean>();

    @Override
    public void initData() {

    }

    public LargeDepartmentStoresPage(Context context, BaseFragment fragment) {
        super(context, fragment);
        if (fragment instanceof DetailFragment) {
            this.fragment = (DetailFragment) fragment;
            isDetailFragment = true;

        } else if (fragment instanceof HomeTreasureFragment) {
            this.mHomeTreasureFragment = (HomeTreasureFragment) fragment;
            isDetailFragment = false;
        }
    }


    @Override
    public View initView(LayoutInflater inflater) {
        View homeView = inflater.inflate(R.layout.page_large_department_stores, null);
        return homeView;
    }

    @Override
    protected void successViewCompleted(View successView) {
        ButterKnife.bind(this, successView);
        initPullToRefresh(plv_refresh);

    }

    @Override
    public void transData() {
        if (isFrist) {

            isFrist = false;
        }

        if (isDetailFragment) {

            mDivisionCode = fragment.mDivisionCode;
            mDivisionType = fragment.mDivisionType;
        } else {

            mDivisionCode = mHomeTreasureFragment.divisionCode;
        }
    }


    @Override
    protected IuwHttpJsonRequest initRequest() {
        return commonRequest(0);
    }


    @Override
    protected boolean getPage(int type) {
        if (!super.getPage(type))
            return false;
        getDataServer();
        return true;
    }

    private void getDataServer() {
        Utils.showProgressDialog(pageContext);
        WebUtils.doPost(commonRequest(getCurPage()));
    }


    private void wrapLvData(ArrayList<LargeDepartmentStoresResponse.LargeDepartmentStoresDto> info) {
        if (info == null) {
            return;
        }
        if (info.size() == 0) {
            return;
        }
        if (currentpage.equals("0")) {
            dataList.clear();
        }
        for (LargeDepartmentStoresResponse.LargeDepartmentStoresDto lineDto : info) {
            dataList.add(lineDto);
            MarketInfoBean marketInfoBean = new MarketInfoBean();
            marketInfoBean.setShopId(lineDto.id);
            marketInfoBean.setShopLat(lineDto.shopsLatitude);
            marketInfoBean.setShopLon(lineDto.shopsLongitude);
            marketInfoBean.setShopName(lineDto.shopName);
            marketInfoBean.setDistance(lineDto.distance);
            marketInfoBeans.add(marketInfoBean);
        }
        IuwApplication.getInstance().iuwMarketInfoBeans =null;
        IuwApplication.getInstance().iuwMarketInfoBeans = (ArrayList<MarketInfoBean>) marketInfoBeans;

        plv_refresh.setAdapter(
                adapter = new CommonAdapter<LargeDepartmentStoresResponse.LargeDepartmentStoresDto>(pageContext,
                        dataList, R.layout.lv_page_market_item) {

                    @Override
                    public void convert(final ViewHolder helper, LargeDepartmentStoresResponse.LargeDepartmentStoresDto bean) {

                        ImageView iv_goods_icon = helper.getView(R.id.iv_goods_icon);
                        Glide.with(pageContext).load(bean.shopImgPath).placeholder(R.drawable.p8_2_shop_default).into(iv_goods_icon);
                        ImageView iv_treasure_icon = helper.getView(R.id.iv_treasure_icon);
                        //Glide.with(pageContext).load(dataList.get(0).preciousImgPath).placeholder(R.drawable.p8_2_shop_default).into(iv_treasure_icon);
                        helper.setText(R.id.tv_home_title, bean.shopName == null ||"null".equals(bean.shopName)? "" : bean.shopName);
                        helper.setText(R.id.tv_home_content, bean.preciousName == null ||"null".equals(bean.preciousName)? "" : bean.preciousName);
                        helper.setText(R.id.tv_home_content_detail, bean.preciousDescription == null||"null".equals(bean.preciousDescription) ? "" : bean.preciousDescription);
                        helper.setText(R.id.tv_collect, StringUtils.isEmpty(bean.collectionNum) ? "0" : bean.collectionNum);
                        helper.setText(R.id.tv_praise, StringUtils.isEmpty(bean.praiseNum) ? "0" : bean.praiseNum);
                        helper.setText(R.id.tv_location, StringUtils.isEmpty(bean.distance) ? "0" : bean.distance);
                        if (StringUtils.isEmpty(bean.collectionId) || "null".equals(bean.collectionId)) {
                            helper.setImageResource(R.id.iv_collect, R.drawable.collect_n);

                        } else {
                            helper.setImageResource(R.id.iv_collect, R.drawable.collect_p);
                        }

                        if (StringUtils.isEmpty(bean.praiseId) || "null".equals(bean.praiseId)) {
                            helper.setImageResource(R.id.iv_praise, R.drawable.praise_n);

                        } else {
                            helper.setImageResource(R.id.iv_praise, R.drawable.praise_p);
                        }

                        ImageView iv_collect = helper.getView(R.id.iv_collect);
                        iv_collect.setTag(R.id.iv_collect, bean.id);
                        iv_collect.setTag(R.id.tv_location, dataList.indexOf(bean));
                        iv_collect.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                collect((String) v.getTag(R.id.iv_collect), (Integer) v.getTag(R.id.tv_location), refreshCollect);
                            }
                        });


                        ImageView iv_praise = helper.getView(R.id.iv_praise);
                        iv_praise.setTag(R.id.iv_praise, bean.id);
                        iv_praise.setTag(R.id.tv_home_title, dataList.indexOf(bean));
                        iv_praise.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                givePraise((String) v.getTag(R.id.iv_praise), (Integer) v.getTag(R.id.tv_home_title), refresh);
                            }
                        });

                        iv_treasure_icon.setOnClickListener(new View.OnClickListener()

                                                            {
                                                                @Override
                                                                public void onClick(View v) {
                                                                    ((MainActivity) mContext).isHiddChange = false;
                                                                    ((MainActivity) mContext).selectionTab(2);
                                                                    Utils.moveToFragment(TreasureDetailFragment.class, fragment, "treasureDetailFragment");
                                                                    TreasureEvent treasureEvent = new TreasureEvent();
                                                                    treasureEvent.setTreasureID(dataList.get(helper.getPosition()).preciousId);
                                                                    EventBus.getDefault().post(treasureEvent);
                                                                }
                                                            }

                        );
                        iv_goods_icon.setOnClickListener(new View.OnClickListener(

                                                         )

                                                         {
                                                             @Override
                                                             public void onClick(View v) {
                                                                 ((MainActivity) mContext).isHiddChange = false;

                                                                 if (isDetailFragment) {
                                                                     Utils.moveToFragment(MarketInfoFragment.class, fragment, "MarketInfoFragment");
                                                                 } else {
                                                                     Utils.moveToFragment(MarketInfoFragment.class, mHomeTreasureFragment, "MarketInfoFragment");
                                                                 }
                                                                 IuwApplication.getInstance().lonlat =null;
                                                                 StoreDetailsEvent storeDetailsEvent = new StoreDetailsEvent();
                                                                 storeDetailsEvent.setShopID(dataList.get(helper.getPosition()).id);
                                                                 String lat = dataList.get(helper.getPosition()).shopsLatitude;
                                                                 String lon = dataList.get(helper.getPosition()).shopsLongitude;
                                                                 storeDetailsEvent.setShopLat(lat);
                                                                 storeDetailsEvent.setShopLon(lon);
                                                                 Lonlat lonlat = new Lonlat();
                                                                 lonlat.setLat(lat);
                                                                 lonlat.setLon(lon);
                                                                 IuwApplication.getInstance().lonlat =lonlat;
                                                                 EventBus.getDefault().post(storeDetailsEvent);
                                                             }
                                                         }

                        );

                    }
                });


    }


    RefreshCollectListener refreshCollect = new RefreshCollectListener() {
        @Override
        public void refreshView(int p) {
            dataList.get(p).collectionId = "1";
            String collectionNum = StringUtils.isEmpty(dataList.get(p).collectionNum)?"0":dataList.get(p).collectionNum;
            dataList.get(p).collectionNum = (String.valueOf(Integer.valueOf(collectionNum) + 1));
            adapter.notifyDataSetChanged();

        }
    };

    RefreshPraiseListener refresh = new RefreshPraiseListener() {
        @Override
        public void refreshView(int p) {
            dataList.get(p).praiseId = "1";
            String praiseNum = StringUtils.isEmpty(dataList.get(p).praiseNum)?"0":dataList.get(p).praiseNum;
            dataList.get(p).praiseNum = (String.valueOf(Integer.valueOf(praiseNum) + 1));
            adapter.notifyDataSetChanged();

        }
    };

    //TODO
    private IuwHttpJsonRequest commonRequest(int startPage)
    {
        LargeDepartmentStoresRequest request = new LargeDepartmentStoresRequest
                (
                        new Response.Listener<LargeDepartmentStoresResponse>() {
                            @Override
                            public void onResponse(LargeDepartmentStoresResponse response) {
                                Utils.closeDialog();
                                plv_refresh.onRefreshComplete();
                                if (dataList != null && dataList.size() > 0) {
                                    dataList.clear();
                                }
                                LargeDepartmentStoresResponse.LargeDepartmentStoresData data = response.data;
                                if (data != null) {
                                    ArrayList<LargeDepartmentStoresResponse.LargeDepartmentStoresDto> info = data.info;
                                    currentpage = data.getCurrentpage();
                                    wrapLvData(info);
                                }

                            }
                        }, this);

        if ("2".equals(mDivisionCode)) //市
        {

            request.setShopCityCode(mDivisionCode==null?"":mDivisionCode);
        }
        else
        {
            request.setShopDistrictCode(mDivisionCode==null?"":mDivisionCode);
        }

        String lat = SharedPreferencesUtil.getFromFileByDefault(pageContext, "geoLat", "41.927618");
        String lon = SharedPreferencesUtil.getFromFileByDefault(pageContext, "geoLng", "123.40706");
        request.setLatitude(lat);   //"latitude":@"41.927618",
        request.setLongitude(lon);  //@"longitude":@"123.40706",
        request.setCurrentnum(Constants.CURRENTNUMBASE + "");
        request.setCurrentpage(startPage+"");
        if (isDetailFragment)
        {
            request.setSortType(fragment.sortsType == null ? "" : fragment.sortsType);
        }

        else
        {
            request.setSortType(mHomeTreasureFragment.sortsType == null ? "" : mHomeTreasureFragment.sortsType);
        }
        UserInfo userInfo = IuwApplication.getInstance().getMyUserInfo();
        if (userInfo!=null)
        {
            request.setUserId(IuwApplication.getInstance().getMyUserInfo().getUserId());
        }
        request.setShopsTypeId("1");
        return request;
    }


}
